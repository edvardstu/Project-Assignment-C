!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC=gcc$/;"	m
DEPS	Makefile	/^DEPS = utilities.h interactions.h str_builder.h$/;"	m
DT	main.c	24;"	d	file:
DT	mainABvsEuler.c	25;"	d	file:
DT	parameters.h	/^extern const double DT = 0.0006;$/;"	v
D_R	mainABvsEuler.c	21;"	d	file:
D_R	parameters.h	/^extern const double D_R = 0.2;$/;"	v
D_R_C	main.c	21;"	d	file:
FACTOR	mainABvsEuler.c	23;"	d	file:
FLAGS	Makefile	/^FLAGS := -O3$/;"	m
GAMMA_PP	main.c	35;"	d	file:
GAMMA_PP	mainABvsEuler.c	36;"	d	file:
GAMMA_PP	parameters.h	/^extern const double GAMMA_PP = 10.0; \/\/1.0 \/\/GAM$/;"	v
GAMMA_R	main.c	28;"	d	file:
GAMMA_R	mainABvsEuler.c	29;"	d	file:
GAMMA_R	parameters.h	/^extern const double GAMMA_R = 1.0;$/;"	v
GAMMA_T	main.c	27;"	d	file:
GAMMA_T	mainABvsEuler.c	28;"	d	file:
GAMMA_T	parameters.h	/^extern const double GAMMA_T = 1.0;$/;"	v
INTERACTIONS_H	interactions.h	2;"	d
KAPPA_HAR	main.c	32;"	d	file:
KAPPA_HAR	mainABvsEuler.c	33;"	d	file:
KAPPA_HAR	parameters.h	/^extern const double KAPPA_HAR = 10.0;   \/\/GS$/;"	v
LAMBDA_HAR	main.c	31;"	d	file:
LAMBDA_HAR	mainABvsEuler.c	32;"	d	file:
LAMBDA_HAR	parameters.h	/^extern const double LAMBDA_HAR = 200.0; \/\/20.0 \/\/FS$/;"	v
LAMBDA_PP	main.c	37;"	d	file:
LAMBDA_PP	mainABvsEuler.c	38;"	d	file:
LAMBDA_PP	parameters.h	/^extern const double LAMBDA_PP = 40.0;$/;"	v
LINKING	Makefile	/^LINKING := -lblas -fopenmp -lgsl -lgslcblas -lm$/;"	m
N_PARTICLES	main.c	19;"	d	file:
N_PARTICLES	mainABvsEuler.c	19;"	d	file:
N_PARTICLES	parameters.h	/^extern const unsigned int N_PARTICLES = 1000;$/;"	v
N_STEPS	main.c	23;"	d	file:
N_STEPS	mainABvsEuler.c	24;"	d	file:
N_STEPS	parameters.h	/^extern const unsigned int N_STEPS = 1000; \/\/500000$/;"	v
OBJ	Makefile	/^OBJ = main.o utilities.o interactions.o str_builder.o$/;"	m
PARAMETERS_H	parameters.h	2;"	d
R	main.c	17;"	d	file:
R	mainABvsEuler.c	17;"	d	file:
R	parameters.h	/^const double R = 17.0;$/;"	v
R_CUT_OFF_FORCE	main.c	38;"	d	file:
R_CUT_OFF_FORCE	mainABvsEuler.c	39;"	d	file:
R_CUT_OFF_FORCE	parameters.h	/^extern const double R_CUT_OFF_FORCE = 2.0;  \/\/ (R_CUT_OFF_FORCE)^2 > R_CUT_OFF_TORQUE_2$/;"	v
R_CUT_OFF_TORQUE_2	main.c	36;"	d	file:
R_CUT_OFF_TORQUE_2	mainABvsEuler.c	37;"	d	file:
R_CUT_OFF_TORQUE_2	parameters.h	/^extern const double R_CUT_OFF_TORQUE_2 = 4.0; \/\/9.0$/;"	v
R_PARTICLE	main.c	18;"	d	file:
R_PARTICLE	mainABvsEuler.c	18;"	d	file:
R_PARTICLE	parameters.h	/^extern const double R_PARTICLE = 0.5;$/;"	v
SIGMA_PP	main.c	/^const double SIGMA_PP = 1.5;\/\/sqrt(2.0);\/\/1\/sqrt(2);$/;"	v
SIGMA_PP	mainABvsEuler.c	/^const double SIGMA_PP = 1.5;\/\/sqrt(2.0);\/\/1\/sqrt(2);$/;"	v
SIGMA_PP	parameters.h	/^extern const double SIGMA_PP = 1.0; \/\/(SIGMA_PP*2)^2 > R_CUT_OFF_TORQUE_2$/;"	v
UTILITIES_H	utilities.h	2;"	d
U_0	main.c	20;"	d	file:
U_0	mainABvsEuler.c	20;"	d	file:
U_0	parameters.h	/^extern const double U_0 = 10.0;$/;"	v
__STR_BUILDER_H__	str_builder.h	2;"	d
a	main.c	/^const double a = sqrt(3);$/;"	v
a	mainABvsEuler.c	/^const double a = sqrt(3);$/;"	v
a	parameters.h	/^extern const double a = sqrt(3);$/;"	v
alloced	str_builder.c	/^    size_t  alloced;$/;"	m	struct:str_builder	file:
closeFile	utilities.c	/^void closeFile(const char * restrict fileName, FILE** fp){$/;"	f
createFileName	utilities.c	/^const char* restrict createFileName(const char* restrict fileNameBase){$/;"	f
createFileNameBase	utilities.c	/^const char* restrict createFileNameBase(const char* restrict fileNameBase, bool overwrite){$/;"	f
createFileNamePrevious	utilities.c	/^const char* restrict createFileNamePrevious(const char* restrict fileNameBase, bool overwrite){$/;"	f
forceHarmonicCircular	interactions.c	/^void forceHarmonicCircular(double *fx_b, double *fy_b, double r_coord, double x, double y, double r_boundary, double lambda_harmonic){$/;"	f
forceHarmonicPP	interactions.c	/^void forceHarmonicPP(double *fx_n, double *fy_n, double r_pn_2, double delta_x, double delta_y, double r_cut_off_force, double lambda_pp){$/;"	f
forceOneOverRQuad	interactions.c	/^void forceOneOverRQuad(double *fx_n, double *fy_n, double r_pn_2, double delta_x, double delta_y){$/;"	f
forceOneOverRQuadSig	interactions.c	/^void forceOneOverRQuadSig(double *fx_n, double *fy_n, double r_pn_2, double delta_x, double delta_y, double sigma_pp){$/;"	f
forceOneOverRSquared	interactions.c	/^void forceOneOverRSquared(double *fx_n, double *fy_n, double r_pn_2, double delta_x, double delta_y, double sigma_pp){$/;"	f
forceWeeksChandlerAndersen	interactions.c	/^void forceWeeksChandlerAndersen(double *fx_n, double *fy_n, double r_pn_2, double delta_x, double delta_y){$/;"	f
len	str_builder.c	/^    size_t  len;$/;"	m	struct:str_builder	file:
main	main.c	/^int main(int argc, char **argv) {$/;"	f
main	mainABvsEuler.c	/^int main(int argc, char **argv) {$/;"	f
openFile	utilities.c	/^void openFile(const char * restrict fileName, FILE** fp){$/;"	f
radius	utilities.c	/^double radius(int index, int n_particles, int n_boundary, double R){$/;"	f
randDouble	utilities.c	/^double randDouble(double min, double max, gsl_rng ** r){$/;"	f
random_seed	utilities.c	/^unsigned long int random_seed(){$/;"	f
readFile	utilities.c	/^void readFile(const char * restrict fileName, FILE** fp){$/;"	f
readInitialState	utilities.c	/^void readInitialState(const char* restrict fileName, int n_particles, double *time, double x[], double y[], double theta[], double *d_r){$/;"	f
setUpRNG	utilities.c	/^void setUpRNG(const gsl_rng_type **T, gsl_rng **r){$/;"	f
str	str_builder.c	/^    char   *str;$/;"	m	struct:str_builder	file:
str_builder	str_builder.c	/^struct str_builder {$/;"	s	file:
str_builder_add_char	str_builder.c	/^void str_builder_add_char(str_builder_t *sb, char c)$/;"	f
str_builder_add_int	str_builder.c	/^void str_builder_add_int(str_builder_t *sb, int val)$/;"	f
str_builder_add_str	str_builder.c	/^void str_builder_add_str(str_builder_t *sb, const char *str, size_t len)$/;"	f
str_builder_clear	str_builder.c	/^void str_builder_clear(str_builder_t *sb)$/;"	f
str_builder_create	str_builder.c	/^str_builder_t *str_builder_create(void)$/;"	f
str_builder_destroy	str_builder.c	/^void str_builder_destroy(str_builder_t *sb)$/;"	f
str_builder_drop	str_builder.c	/^void str_builder_drop(str_builder_t *sb, size_t len)$/;"	f
str_builder_dump	str_builder.c	/^char *str_builder_dump(const str_builder_t *sb, size_t *len)$/;"	f
str_builder_ensure_space	str_builder.c	/^static void str_builder_ensure_space(str_builder_t *sb, size_t add_len)$/;"	f	file:
str_builder_len	str_builder.c	/^size_t str_builder_len(const str_builder_t *sb)$/;"	f
str_builder_min_size	str_builder.c	/^static const size_t str_builder_min_size = 32;$/;"	v	file:
str_builder_peek	str_builder.c	/^const char *str_builder_peek(const str_builder_t *sb)$/;"	f
str_builder_t	str_builder.h	/^typedef struct str_builder str_builder_t;$/;"	t	typeref:struct:str_builder
str_builder_truncate	str_builder.c	/^void str_builder_truncate(str_builder_t *sb, size_t len)$/;"	f
sunflower	utilities.c	/^void sunflower(double x[], double y[], int n_particles, int alpha, double R){$/;"	f
swapPointers	utilities.c	/^void swapPointers(double *Y_i, double *Y_i_prev){$/;"	f
testFunc	utilities.c	/^void testFunc(){$/;"	f
torqueHarmonicCircular	interactions.c	/^void torqueHarmonicCircular(double *torque_b, double r_coord, double x, double y, double theta, double lambda_harmonic, double kappa_harmonic){$/;"	f
torqueWeeksChandlerAndersen	interactions.c	/^void torqueWeeksChandlerAndersen(double *torque_n, double theta_p, double theta_n, double gamma_pp, double r_pn_2){$/;"	f
walltime	utilities.c	/^double walltime(){$/;"	f
writeFinalState	utilities.c	/^void writeFinalState(const char* restrict fileNameBase, int n_particles, double time, double x[], double y[], double theta[], double d_r){$/;"	f
writeSimulationParameters	utilities.c	/^void writeSimulationParameters(const char* restrict fileNameBase, double r, double r_particle, unsigned int n_particles, double u_0, double D_r, unsigned int n_steps, double dt, double gamma_t, double gamma_r, double lambda_har, double kappa_har, double gamma_pp, double r_cut_off_torque_2, double lambda_pp, double r_cut_off_force, double sigma_pp){$/;"	f
